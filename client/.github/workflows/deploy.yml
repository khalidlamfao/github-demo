name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY_FRONTEND: my-task-app-frontend
  ECR_REPOSITORY_BACKEND: my-task-app-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build frontend image
      run: |
        docker build -t $ECR_REPOSITORY_FRONTEND ./client
        docker tag $ECR_REPOSITORY_FRONTEND:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_FRONTEND:latest

    - name: Build backend image
      run: |
        docker build -t $ECR_REPOSITORY_BACKEND ./server
        docker tag $ECR_REPOSITORY_BACKEND:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_BACKEND:latest

    - name: Scan images with Trivy
      uses: aquasecurity/trivy-action@v0.13.1
      with:
        image-ref: $ECR_REPOSITORY_BACKEND
        format: 'table'
        exit-code: 1
        ignore-unfixed: true

    - name: Push images to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_FRONTEND:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_BACKEND:latest

    - name: Terraform Apply (optional)
      if: github.ref == 'refs/heads/main'
      run: |
        cd infrastructure
        terraform init
        terraform apply -auto-approve

